For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].

Given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.

Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.
Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.

There is a way to simplify the formula
f(n,k)=f(n−1,k)+f(n−1,k−1)+f(n−1,k−2)+⋯+f(n−1,k−n+1)f(n,k)=f(n−1,k)+f(n−1,k−1)+f(n−1,k−2)+⋯+f(n−1,k−n+1)f(n,k)=f(n−1,k)+f(n−1,k−1)+f(n−1,k−2)+⋯+f(n−1,k−n+1)
Triangle of Mahonian Numbers

class Solution {
    private final int MOD = (int)(1e9 + 7);
    private Integer dp[][];

    public int kInversePairs(int n, int k) {
       dp = new Integer[n+1][k+1];
       return getInversions(n, k);
    }

    private int getInversions(int n, int k){
        if(n==0) return 0;
        else if(k==0) return 1;
        if(dp[n][k] != null) return dp[n][k];
        int result = 0;
        for(int i=0;i<=Math.min(k,n-1);i++){
           result += getInversions(n-1, k-i);
           result %= MOD;
        }
        return dp[n][k] = result;
    }
}
