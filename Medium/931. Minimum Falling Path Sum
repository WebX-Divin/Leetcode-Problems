class Solution {
    public int minFallingPathSum(int[][] matrix) {
        Integer[][] dp = new Integer[matrix.length + 1][matrix[0].length];
        int ans = Integer.MAX_VALUE;
        for(int i=0;i<matrix.length;i++){
            ans = Math.min(ans, (recursiveDp(matrix, dp, 0, i, matrix.length)));
        }
        return ans;
    }
    private int recursiveDp(int[][] matrix, Integer[][] dp, int i, int j, int n){
        if(j >= n || j < 0) return (int) Math.pow(10,7);
        if(i == n - 1) return matrix[i][j];
        if(dp[i][j] != null) return dp[i][j];
        int x = matrix[i][j] + recursiveDp(matrix, dp, i + 1, j, n);
        int y = matrix[i][j] + recursiveDp(matrix, dp, i + 1, j + 1, n);
        int z = matrix[i][j] + recursiveDp(matrix, dp, i + 1, j - 1, n);
        int ans = Math.min(x, Math.min(y,z));
        dp[i][j] = ans;
        return ans;
    }
}
